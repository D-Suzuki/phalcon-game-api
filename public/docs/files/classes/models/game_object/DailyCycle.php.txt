<?php

namespace GameObject;

Abstract Class DailyCycle
{

    const DEFAULT_CYCLE_TIME = '03:00:00';

    /**
     * 日付サイクル内判定
     * true  -> 日付またいでいない
     * false -> 日付またいでいる
     * @param DateTime $BaseTime
     * @param DateTime $CheckTime
     * @param string $cycle_time "HH:MM:SS"
     * @return bool
     */
    public static function inCycle(\DateTime $BaseTime, \DateTime $CheckTime, string $cycle_time = self::DEFAULT_CYCLE_TIME)
    {
        \AppLogger::startFunc(__METHOD__, ['$BaseTime' => $BaseTime, '$CheckTime' => $CheckTime, '$cycle_time' => $cycle_time]);
        $NextCycleTime = self::getNextCycleTime($BaseTime, $cycle_time);
        $in_cycle      = $CheckTime < $NextCycleTime;
        \AppLogger::endFunc(__METHOD__, $in_cycle);
		return $in_cycle;
    }

    /**
     * 指定基準日から次の日付またぎ日時を取得
     * @param DateTime $BaseTime
     * @param string $cycle_time
     * @return DateTime
     */
    private static function getNextCycleTime(\DateTime $BaseTime, string $cycle_time)
    {
        \AppLogger::startFunc(__METHOD__, ['$BaseTime' => $BaseTime, '$cycle_time' => $cycle_time]);
        $base_date         = $BaseTime->format('Y-m-d');
		$one_after_date    = date('Y-m-d', strtotime($base_date . ' +1 day'));
		$BaseCycleTime     = new \DateTime($base_date . ' ' . $cycle_time);
		$OneAfterCycleTime = new \DateTime($one_after_date . ' ' . $cycle_time);
		if($BaseTime < $BaseCycleTime){
			$NextCycleTime = $BaseCycleTime;
		}else{
			$NextCycleTime = $OneAfterCycleTime;
		}
		\AppLogger::endFunc(__METHOD__, $NextCycleTime);
		return $NextCycleTime;
    }

}
